name: Deploy to ECS

#on:
#  push:
#    branches:
#      - ci

jobs:
  deploy:
    name: Deploy to Amazon ECS
    runs-on: ubuntu-latest

    environment: dev   # default environment; adjust dynamically in stages

    strategy:
      matrix:
        stage: [dev, prod]  # Matrix for multiple environments
        region: [eu-central-1] # Adjust AWS regions as needed

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build with Maven
        run: mvn clean package

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker Image to ECR
        id: build-image
        run: |
          IMAGE_TAG=${{ github.sha }}
          REPOSITORY_NAME=my-spring-app-${{ matrix.stage }} # Separate repo for dev/prod
          ECR_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ matrix.region }}.amazonaws.com/${REPOSITORY_NAME}
          
          docker build -t $ECR_URI:$IMAGE_TAG .
          docker push $ECR_URI:$IMAGE_TAG


      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT


      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: my-ecr-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG


      - name: Update ECS service
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ matrix.region }}
        run: |
          IMAGE_TAG=${{ github.sha }}
          CLUSTER_NAME=my-ecs-cluster-${{ matrix.stage }} # Separate clusters for dev/prod
          SERVICE_NAME=my-ecs-service-${{ matrix.stage }}
          TASK_FAMILY=my-task-${{ matrix.stage }}

          # Get the current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY)

          # Update the container image in the task definition JSON and deploy to ECS
          NEW_TASK_DEF=$(echo $TASK_DEFINITION | jq --arg IMAGE_URI "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ matrix.region }}.amazonaws.com/my-spring-app-${{ matrix.stage }}:$IMAGE_TAG" '.taskDefinition.containerDefinitions[0].image = $IMAGE_URI')
          
          # Register new task definition
          aws ecs register-task-definition \
            --cli-input-json "$(echo $NEW_TASK_DEF | jq '.taskDefinition | del(.status, .taskDefinitionArn, .revision, .requiresAttributes, .compatibilities)')"

          # Update the ECS service to use the new task definition
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment

      - name: Retrieve Secrets from AWS Secrets Manager
        id: get-secrets
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ matrix.region }}
        run: |
          SECRET_ARN=my-secret-arn-${{ matrix.stage }}
          SECRETS=$(aws secretsmanager get-secret-value --secret-id $SECRET_ARN | jq -r '.SecretString')
          echo "::set-output name=secrets::$SECRETS"

      - name: Update ECS Task Definition with Secrets
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ matrix.region }}
        run: |
          CLUSTER_NAME=my-ecs-cluster-${{ matrix.stage }}
          SERVICE_NAME=my-ecs-service-${{ matrix.stage }}
          TASK_FAMILY=my-task-${{ matrix.stage }}
          
          SECRETS=${{ steps.get-secrets.outputs.secrets }}
          
          # Add secrets to task definition environment variables
          NEW_TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY | jq --argjson SECRETS "$SECRETS" '.taskDefinition.containerDefinitions[0].environment += [{ "name": "MY_SECRET_ENV", "value": $SECRETS }]')
          
          # Register the updated task definition
          aws ecs register-task-definition \
            --cli-input-json "$(echo $NEW_TASK_DEF | jq '.taskDefinition | del(.status, .taskDefinitionArn, .revision, .requiresAttributes, .compatibilities)')"

          # Force ECS service update to use new task definition
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment
