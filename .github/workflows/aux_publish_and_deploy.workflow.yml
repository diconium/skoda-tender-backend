name: Auxiliary Workflow to Publish and Deploy Application
run-name: Publish and Deploy Application

on:
  workflow_call:
    inputs:
      stage:
        required: true
        type: string
        default: development

jobs:
  publish-application:
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}

    name: Deploy to Amazon ECS
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Maven project version
        id: project-version
        run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker Image to ECR
        id: build-image
        run: |
          if [ "${{ inputs.stage }}" = "production" ]; then
            IMAGE_TAG=${{ steps.project-version.outputs.version }}
          else
            IMAGE_TAG=${{ github.sha }}
          fi
          
          REPOSITORY_NAME=${{ vars.ECR_REPOSITORY_NAME }}
          ECR_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${REPOSITORY_NAME}

          docker build -t $ECR_URI:$IMAGE_TAG .
          docker push $ECR_URI:$IMAGE_TAG
          echo "image=$ECR_URI:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ vars.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json
          
      - name: Fill in new image ID in task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ vars.ECS_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS tasks definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ vars.ECS_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
          wait-for-service-stability: true
